// Generated by gencpp from file scara_velocity_kinematics/ee_to_joint_velocityResponse.msg
// DO NOT EDIT!


#ifndef SCARA_VELOCITY_KINEMATICS_MESSAGE_EE_TO_JOINT_VELOCITYRESPONSE_H
#define SCARA_VELOCITY_KINEMATICS_MESSAGE_EE_TO_JOINT_VELOCITYRESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace scara_velocity_kinematics
{
template <class ContainerAllocator>
struct ee_to_joint_velocityResponse_
{
  typedef ee_to_joint_velocityResponse_<ContainerAllocator> Type;

  ee_to_joint_velocityResponse_()
    : th1_dot(0.0)
    , th2_dot(0.0)
    , d3_dot(0.0)  {
    }
  ee_to_joint_velocityResponse_(const ContainerAllocator& _alloc)
    : th1_dot(0.0)
    , th2_dot(0.0)
    , d3_dot(0.0)  {
  (void)_alloc;
    }



   typedef double _th1_dot_type;
  _th1_dot_type th1_dot;

   typedef double _th2_dot_type;
  _th2_dot_type th2_dot;

   typedef double _d3_dot_type;
  _d3_dot_type d3_dot;





  typedef boost::shared_ptr< ::scara_velocity_kinematics::ee_to_joint_velocityResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::scara_velocity_kinematics::ee_to_joint_velocityResponse_<ContainerAllocator> const> ConstPtr;

}; // struct ee_to_joint_velocityResponse_

typedef ::scara_velocity_kinematics::ee_to_joint_velocityResponse_<std::allocator<void> > ee_to_joint_velocityResponse;

typedef boost::shared_ptr< ::scara_velocity_kinematics::ee_to_joint_velocityResponse > ee_to_joint_velocityResponsePtr;
typedef boost::shared_ptr< ::scara_velocity_kinematics::ee_to_joint_velocityResponse const> ee_to_joint_velocityResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::scara_velocity_kinematics::ee_to_joint_velocityResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::scara_velocity_kinematics::ee_to_joint_velocityResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::scara_velocity_kinematics::ee_to_joint_velocityResponse_<ContainerAllocator1> & lhs, const ::scara_velocity_kinematics::ee_to_joint_velocityResponse_<ContainerAllocator2> & rhs)
{
  return lhs.th1_dot == rhs.th1_dot &&
    lhs.th2_dot == rhs.th2_dot &&
    lhs.d3_dot == rhs.d3_dot;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::scara_velocity_kinematics::ee_to_joint_velocityResponse_<ContainerAllocator1> & lhs, const ::scara_velocity_kinematics::ee_to_joint_velocityResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace scara_velocity_kinematics

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::scara_velocity_kinematics::ee_to_joint_velocityResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::scara_velocity_kinematics::ee_to_joint_velocityResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::scara_velocity_kinematics::ee_to_joint_velocityResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::scara_velocity_kinematics::ee_to_joint_velocityResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::scara_velocity_kinematics::ee_to_joint_velocityResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::scara_velocity_kinematics::ee_to_joint_velocityResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::scara_velocity_kinematics::ee_to_joint_velocityResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "54847e72edaf627d504888eafa28ced9";
  }

  static const char* value(const ::scara_velocity_kinematics::ee_to_joint_velocityResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x54847e72edaf627dULL;
  static const uint64_t static_value2 = 0x504888eafa28ced9ULL;
};

template<class ContainerAllocator>
struct DataType< ::scara_velocity_kinematics::ee_to_joint_velocityResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "scara_velocity_kinematics/ee_to_joint_velocityResponse";
  }

  static const char* value(const ::scara_velocity_kinematics::ee_to_joint_velocityResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::scara_velocity_kinematics::ee_to_joint_velocityResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 th1_dot\n"
"float64 th2_dot\n"
"float64 d3_dot\n"
"\n"
"\n"
"\n"
;
  }

  static const char* value(const ::scara_velocity_kinematics::ee_to_joint_velocityResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::scara_velocity_kinematics::ee_to_joint_velocityResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.th1_dot);
      stream.next(m.th2_dot);
      stream.next(m.d3_dot);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ee_to_joint_velocityResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::scara_velocity_kinematics::ee_to_joint_velocityResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::scara_velocity_kinematics::ee_to_joint_velocityResponse_<ContainerAllocator>& v)
  {
    s << indent << "th1_dot: ";
    Printer<double>::stream(s, indent + "  ", v.th1_dot);
    s << indent << "th2_dot: ";
    Printer<double>::stream(s, indent + "  ", v.th2_dot);
    s << indent << "d3_dot: ";
    Printer<double>::stream(s, indent + "  ", v.d3_dot);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SCARA_VELOCITY_KINEMATICS_MESSAGE_EE_TO_JOINT_VELOCITYRESPONSE_H
