// Generated by gencpp from file scara_velocity_controller/VelocityControlReferenceRequest.msg
// DO NOT EDIT!


#ifndef SCARA_VELOCITY_CONTROLLER_MESSAGE_VELOCITYCONTROLREFERENCEREQUEST_H
#define SCARA_VELOCITY_CONTROLLER_MESSAGE_VELOCITYCONTROLREFERENCEREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace scara_velocity_controller
{
template <class ContainerAllocator>
struct VelocityControlReferenceRequest_
{
  typedef VelocityControlReferenceRequest_<ContainerAllocator> Type;

  VelocityControlReferenceRequest_()
    : x_dot(0.0)
    , y_dot(0.0)
    , z_dot(0.0)  {
    }
  VelocityControlReferenceRequest_(const ContainerAllocator& _alloc)
    : x_dot(0.0)
    , y_dot(0.0)
    , z_dot(0.0)  {
  (void)_alloc;
    }



   typedef double _x_dot_type;
  _x_dot_type x_dot;

   typedef double _y_dot_type;
  _y_dot_type y_dot;

   typedef double _z_dot_type;
  _z_dot_type z_dot;





  typedef boost::shared_ptr< ::scara_velocity_controller::VelocityControlReferenceRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::scara_velocity_controller::VelocityControlReferenceRequest_<ContainerAllocator> const> ConstPtr;

}; // struct VelocityControlReferenceRequest_

typedef ::scara_velocity_controller::VelocityControlReferenceRequest_<std::allocator<void> > VelocityControlReferenceRequest;

typedef boost::shared_ptr< ::scara_velocity_controller::VelocityControlReferenceRequest > VelocityControlReferenceRequestPtr;
typedef boost::shared_ptr< ::scara_velocity_controller::VelocityControlReferenceRequest const> VelocityControlReferenceRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::scara_velocity_controller::VelocityControlReferenceRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::scara_velocity_controller::VelocityControlReferenceRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::scara_velocity_controller::VelocityControlReferenceRequest_<ContainerAllocator1> & lhs, const ::scara_velocity_controller::VelocityControlReferenceRequest_<ContainerAllocator2> & rhs)
{
  return lhs.x_dot == rhs.x_dot &&
    lhs.y_dot == rhs.y_dot &&
    lhs.z_dot == rhs.z_dot;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::scara_velocity_controller::VelocityControlReferenceRequest_<ContainerAllocator1> & lhs, const ::scara_velocity_controller::VelocityControlReferenceRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace scara_velocity_controller

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::scara_velocity_controller::VelocityControlReferenceRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::scara_velocity_controller::VelocityControlReferenceRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::scara_velocity_controller::VelocityControlReferenceRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::scara_velocity_controller::VelocityControlReferenceRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::scara_velocity_controller::VelocityControlReferenceRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::scara_velocity_controller::VelocityControlReferenceRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::scara_velocity_controller::VelocityControlReferenceRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "758a76377157281c429e71afe42fbfe1";
  }

  static const char* value(const ::scara_velocity_controller::VelocityControlReferenceRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x758a76377157281cULL;
  static const uint64_t static_value2 = 0x429e71afe42fbfe1ULL;
};

template<class ContainerAllocator>
struct DataType< ::scara_velocity_controller::VelocityControlReferenceRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "scara_velocity_controller/VelocityControlReferenceRequest";
  }

  static const char* value(const ::scara_velocity_controller::VelocityControlReferenceRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::scara_velocity_controller::VelocityControlReferenceRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 x_dot\n"
"float64 y_dot\n"
"float64 z_dot\n"
;
  }

  static const char* value(const ::scara_velocity_controller::VelocityControlReferenceRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::scara_velocity_controller::VelocityControlReferenceRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.x_dot);
      stream.next(m.y_dot);
      stream.next(m.z_dot);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct VelocityControlReferenceRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::scara_velocity_controller::VelocityControlReferenceRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::scara_velocity_controller::VelocityControlReferenceRequest_<ContainerAllocator>& v)
  {
    s << indent << "x_dot: ";
    Printer<double>::stream(s, indent + "  ", v.x_dot);
    s << indent << "y_dot: ";
    Printer<double>::stream(s, indent + "  ", v.y_dot);
    s << indent << "z_dot: ";
    Printer<double>::stream(s, indent + "  ", v.z_dot);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SCARA_VELOCITY_CONTROLLER_MESSAGE_VELOCITYCONTROLREFERENCEREQUEST_H
