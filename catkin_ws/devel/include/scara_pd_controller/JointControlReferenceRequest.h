// Generated by gencpp from file scara_pd_controller/JointControlReferenceRequest.msg
// DO NOT EDIT!


#ifndef SCARA_PD_CONTROLLER_MESSAGE_JOINTCONTROLREFERENCEREQUEST_H
#define SCARA_PD_CONTROLLER_MESSAGE_JOINTCONTROLREFERENCEREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace scara_pd_controller
{
template <class ContainerAllocator>
struct JointControlReferenceRequest_
{
  typedef JointControlReferenceRequest_<ContainerAllocator> Type;

  JointControlReferenceRequest_()
    : th1_des(0.0)
    , th2_des(0.0)
    , d3_des(0.0)  {
    }
  JointControlReferenceRequest_(const ContainerAllocator& _alloc)
    : th1_des(0.0)
    , th2_des(0.0)
    , d3_des(0.0)  {
  (void)_alloc;
    }



   typedef double _th1_des_type;
  _th1_des_type th1_des;

   typedef double _th2_des_type;
  _th2_des_type th2_des;

   typedef double _d3_des_type;
  _d3_des_type d3_des;





  typedef boost::shared_ptr< ::scara_pd_controller::JointControlReferenceRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::scara_pd_controller::JointControlReferenceRequest_<ContainerAllocator> const> ConstPtr;

}; // struct JointControlReferenceRequest_

typedef ::scara_pd_controller::JointControlReferenceRequest_<std::allocator<void> > JointControlReferenceRequest;

typedef boost::shared_ptr< ::scara_pd_controller::JointControlReferenceRequest > JointControlReferenceRequestPtr;
typedef boost::shared_ptr< ::scara_pd_controller::JointControlReferenceRequest const> JointControlReferenceRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::scara_pd_controller::JointControlReferenceRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::scara_pd_controller::JointControlReferenceRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::scara_pd_controller::JointControlReferenceRequest_<ContainerAllocator1> & lhs, const ::scara_pd_controller::JointControlReferenceRequest_<ContainerAllocator2> & rhs)
{
  return lhs.th1_des == rhs.th1_des &&
    lhs.th2_des == rhs.th2_des &&
    lhs.d3_des == rhs.d3_des;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::scara_pd_controller::JointControlReferenceRequest_<ContainerAllocator1> & lhs, const ::scara_pd_controller::JointControlReferenceRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace scara_pd_controller

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::scara_pd_controller::JointControlReferenceRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::scara_pd_controller::JointControlReferenceRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::scara_pd_controller::JointControlReferenceRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::scara_pd_controller::JointControlReferenceRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::scara_pd_controller::JointControlReferenceRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::scara_pd_controller::JointControlReferenceRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::scara_pd_controller::JointControlReferenceRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "58000253bbd0172bbf3d9685de903072";
  }

  static const char* value(const ::scara_pd_controller::JointControlReferenceRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x58000253bbd0172bULL;
  static const uint64_t static_value2 = 0xbf3d9685de903072ULL;
};

template<class ContainerAllocator>
struct DataType< ::scara_pd_controller::JointControlReferenceRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "scara_pd_controller/JointControlReferenceRequest";
  }

  static const char* value(const ::scara_pd_controller::JointControlReferenceRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::scara_pd_controller::JointControlReferenceRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 th1_des\n"
"float64 th2_des\n"
"float64 d3_des\n"
;
  }

  static const char* value(const ::scara_pd_controller::JointControlReferenceRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::scara_pd_controller::JointControlReferenceRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.th1_des);
      stream.next(m.th2_des);
      stream.next(m.d3_des);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct JointControlReferenceRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::scara_pd_controller::JointControlReferenceRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::scara_pd_controller::JointControlReferenceRequest_<ContainerAllocator>& v)
  {
    s << indent << "th1_des: ";
    Printer<double>::stream(s, indent + "  ", v.th1_des);
    s << indent << "th2_des: ";
    Printer<double>::stream(s, indent + "  ", v.th2_des);
    s << indent << "d3_des: ";
    Printer<double>::stream(s, indent + "  ", v.d3_des);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SCARA_PD_CONTROLLER_MESSAGE_JOINTCONTROLREFERENCEREQUEST_H
